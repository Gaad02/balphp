<?php

/**
 * BalRoleAndUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Bal_Model_RoleAndUser extends Base_BalRoleAndUser
{

	/**
	 * Ensure Level
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureLevel ( $Event, $Event_type ) {
		# Prepare
		$save = false;
		
		# Level
		if ( $Event_type === 'postSave' ) {
			# Update the User's level with the latest highest role level
			$level_highest = 0;
			$User = $this->User;
			$User_Roles = $User->Roles;
			foreach ( $User_Roles as $User_Role ) {
				$level = $User_Role->level;
				if ( $level && $level > $level_highest ) {
					$level_highest = $level;
				}
			}
			$User->level = $level_highest;
			$User->save();
		}
		
		# Return
		return $save;
	}
	/**
	 * Ensure Consistency
	 * @param Doctrine_Event $Event
	 * @param string $Event_type
	 * @return boolean	wheter or not to save
	 */
	public function ensure ( $Event, $Event_type ) {
		# Prepare
		$User = $Event->getInvoker();
		
		# Handle
		$ensure = array(
			$User->ensureLevel($Event,$Event_type)
		);
		
		# Return save
		return in_array(true,$ensure);
	}
	
	/**
	 * preSave Event
	 * @param Doctrine_Event $Event
	 * @return
	 */
	public function preSave ( $Event ) {
		# Prepare
		$User = $Event->getInvoker();
		$result = true;
		
		# Ensure
		if ( self::ensure($Event, 'preSave') ) {
			// will save naturally
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	/**
	 * postSave Event
	 * @param Doctrine_Event $Event
	 * @return
	 */
	public function postSave ( $Event ) {
		# Prepare
		$User = $Event->getInvoker();
		$result = true;
		
		# Ensure
		if ( self::ensure($Event, 'postSave') ) {
			$User->save();
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
}