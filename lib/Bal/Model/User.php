<?php

/**
 * User
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6508 2009-10-14 06:28:49Z jwage $
 */
class Bal_Model_User extends Base_User {

	/**
	 * Apply accessors and modifiers
	 * @return
	 */
	public function setUp ( ) {
		$this->hasAccessor('fullname', 'getFullname');
		$this->hasMutator('avatar', 'setAvatar');
		parent::setUp();
	}
	
	/**
	 * Set the User's Avatar
	 * @return string
	 */
	protected function setMediaAttachment ( $what, $value ) {
		# Prepare
		$Media = false;
		
		# Create Media
		if ( is_array($value) ) {
			if ( array_key_exists('delete', $value) && $value['delete'] ) {
				$this->_set($what, null);
			} elseif ( array_key_exists('id', $value) ) {
				$Media = Doctrine::getTable('Media')->find($value);
			} elseif ( array_key_exists('tmpname', $value) ) {
				if ( empty($value['error']) ) {
					$Media = new Media();
					$Media->file = $value;
				}
			} elseif ( array_key_exists('file', $value) ) {
				if ( empty($value['file']['error']) ) {
					$Media = new Media();
					$Media->file = $value['file'];
				}
			}
		}
		
		# Apply Media
		if ( $Media ) {
			if ( isset($this->$what) ) {
				$this->$what->delete();
			}
			$this->_set($what, $Media);
		}
		
		# Done
		return true;
	}
	
	
	/**
	 * Set the User's Avatar
	 * @return string
	 */
	public function setAvatar ( $value ) {
		return $this->setMediaAttachment('Avatar', $value);
	}
	
	/**
	 * Get the User's fullname
	 * @return string
	 */
	public function getFullname ( ) {
		$fullname = array($this->title, $this->firstname, $this->lastname);
		return implode(' ', $fullname);
	}
	
	/**
	 * Set the Role(s) for a User (clear others)
	 * @param mixed $role
	 */
	public function setRole ( $role ) {
		$this->unlink('Roles');
		$this->link('Roles', $role);
		return true;
	}

	/**
	 * Add a Role(s) to the User
	 * @param mixed $role
	 */
	public function addRole ( $role ) {
		$this->link('Roles', $role);
		return true;
	}

	/**
	 * Does user have Role?
	 * @param mixed $permission
	 */
	public function hasRole ( $role ) {
		// Prepare
		if ( is_object($role) ) {
			$role = $role->code;
		} elseif ( is_array($role) ) {
			$role = $role['code'];
		}
		// Search
		$List = $this->Roles;
		foreach ( $List as $Role ) {
			if ( $role === $Role->code ) {
				$result = true;
				break;
			}
		}
		// Done
		return $result;
	}
	
	/**
	 * Does user have Permission?
	 * @param mixed $permission
	 */
	public function hasPermission ( $permission ) {
		// Prepare
		if ( is_object($permission) ) {
			$permission = $permission->code;
		} elseif ( is_array($permission) ) {
			$permission = $permission['code'];
		}
		// Search
		$List = $this->Permissions;
		foreach ( $List as $Permission ) {
			if ( $permission === $Permission->code ) {
				$result = true;
				break;
			}
		}
		// Done
		return $result;
	}
	
	/**
	 * Ensure Fullname
	 * @return boolean	wheter or not to save
	 */
	public function ensureFullname(){
		# Prepare
		$save = false;
		
		# Fullname
		if ( $this->_get('fullname') !== $this->getFullname() ) {
			$this->_set('fullname', $this->getFullname(), false); // false at end to prevent comparison
			$save = true;
		}
		
		# Done
		return $save;
	}
	
	/**
	 * Ensure Consistency
	 * @return boolean	wheter or not to save
	 */
	public function ensure(){
		$ensure = array(
			$this->ensureFullname()
		);
		return in_array(true,$ensure);
	}
	
	/**
	 * preSave Event
	 * @return
	 */
	public function preSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$result = true;
		
		# Ensure
		if ( self::ensure($Event) ) {
			// will save naturally
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	/**
	 * postSave Event
	 * @return
	 */
	public function postSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$result = true;
		
		# Ensure
		if ( self::ensure($Event) ) {
			$this->save();
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
}
