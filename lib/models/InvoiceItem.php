<?php

/**
 * User
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6508 2009-10-14 06:28:49Z jwage $
 */
class Bal_InvoiceItem extends Base_Bal_InvoiceItem {
	
	
	# ========================
	# Ensure Helpers
	
	/**
	 * Ensure Totals
	 * @param Doctrine_Event $Event
	 * @return boolean	success
	 */
	public function ensureTotals($Event, $Event_type){
		# Check
		if ( !in_array($Event_type,array('preSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Fetch
		$InvoiceItem = $Event->getInvoker();
		
		# --------------------------
		# Ensure
		
		# Apply Totals
		$InvoiceItem->applyTotals();
		
		# --------------------------
		
		# Return true
		return true;
	}
	
	/**
	 * Ensure Consistency
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensure ( $Event, $Event_type ){
		return Bal_Doctrine_Core::ensure($Event,$Event_type,array(
			'ensureTotals'
		));
	}
	
	
	# ========================
	# Payment Helpers
	
	/**
	 * Convert us into the Payment Model Representation
	 * @return Bal_Payment_Model_InvoiceItem
	 */
	public function generatePaymentModel ( ) {
		# Prepare
		$InvoiceItem = $this;
		$invoiceitem = $InvoiceItem->toArray(false);
		
		# Prepare PaymentInvoiceItem
		$PaymentInvoiceItem = new Bal_Payment_Model_InvoiceItem();
		
		# Adjust Keys
		$keys = $PaymentInvoiceItem->getKeys(); array_keys_keep($invoiceitem, $keys);
		
		# Apply the InvoiceItem
		$PaymentInvoiceItem->merge($invoiceitem);
		
		# Apply the Totals
		$PaymentInvoiceItem->applyTotals();
		
		# Validate
		$PaymentInvoiceItem->validate();
		
		# Return the PaymentInvoiceItem
		return $PaymentInvoiceItem;
	}
	
	/**
	 * Calculate totals for ourself
	 * @return true
	 */
	public function applyTotals ( ) {
		# Prepare
		$InvoiceItem = $this;
		
		# Apply Totals
		Bal_Payment_Model_InvoiceItem::applyTotalsModel($InvoiceItem);
		
		# Return true
		return true;
	}
	
	
	# ========================
	# Events
	
	/**
	 * preSave Event
	 * @param Doctrine_Event $Event
	 * @return
	 */
	public function preSave ( $Event ) {
		# Prepare
		$result = true;
		
		# Ensure
		if ( self::ensure($Event, __FUNCTION__) ) {
			// no need
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	
	
}
