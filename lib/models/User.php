<?php

/**
 * User
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6508 2009-10-14 06:28:49Z jwage $
 */
class Bal_User extends Base_Bal_User {


	# ========================
	# CONSTRUCTORS
	
	
	/**
	 * Apply accessors and modifiers
	 * @version 1.1, April 12, 2010
	 * @return
	 */
	public function setUp ( ) {
		$this->hasMutator('Avatar', 'setAvatar');
		$this->hasMutator('password', 'setPassword');
		return parent::setUp();
	}
	
	
	# ========================
	# MISC
	
	
	/**
	 * Set a File Attachment
	 * @version 1.1, April 12, 2010
	 * @return string
	 */
	protected function setFileAttachment ( $what, $file ) {
		$value = Bal_Doctrine_Core::presetFileAttachment($this,$what,$file);
		return $value === false ? null : $this->_set($what,$value,false);
	}
	
	/**
	 * Set the User's Avatar
	 * @version 1.1, April 12, 2010
	 * @return string
	 */
	public function setAvatar ( $value ) {
		return $this->setFileAttachment('Avatar', $value);
	}
	
	/**
	 * Prepare a User's Password
	 * @version 1.1, April 12, 2010
	 * @return
	 */
	public function preparePassword ( $value ) {
		# Fetch Salt
		// helps against rainbow attacks
		$salt = Bal_App::getConfig('bal.setup.salt','');
		
		# Generate hash
		$password = md5($salt.$value);
		
		# Return password
		return $password;
	}
	
	/**
	 * Reset the User's Password
	 * @version 1.1, April 12, 2010
	 * @return
	 */
	public function resetPassword ( ) {
		# Reset Password
		$password = generate_password();
		$this->password = $password;
		
		# Create Welcome Message
		$Message = new Message();
		$Message->UserFor = $this;
		$Message->useTemplate('user-password-reset',compact('password'));
		$Message->save();
		
		# Chain
		return $this;
	}
	
	/**
	 * Set the User's Password
	 * @version 1.1, April 12, 2010
	 * @return
	 */
	public function setPassword ( $value ) {
		$password = $this->preparePassword($value);
		return $this->_set('password',$password);
	}
	
	/**
	 * Compare the User's Credentials with passed
	 * @version 1.1, April 12, 2010
	 * @return boolean
	 */
	public function compareCredentials ( $username, $password ) {
		return $this->username === $username && ($this->password === $password || $this->password === $this->preparePassword($password));
	}
	
	/**
	 * Set the Role(s) for a User (clear others)
	 * @version 1.1, April 12, 2010
	 * @param mixed $role
	 */
	public function setRole ( $role ) {
		$this->unlink('Roles');
		$this->link('Roles', $role);
		return true;
	}

	/**
	 * Add a Role(s) to the User
	 * @version 1.1, April 12, 2010
	 * @param mixed $role
	 */
	public function addRole ( $role ) {
		$this->link('Roles', $role);
		return true;
	}

	/**
	 * Does user have Role?
	 * @version 1.2, April 16, 2010
	 * @since 1.1, April 12, 2010
	 * @param mixed $permission
	 * @return bool
	 */
	public function hasRole ( $role ) {
		# Prepare
		$result = false;
		
		# Fetch
		$Role_code = delve($role,'code');
		
		# Search
		$List = $this->Roles;
		foreach ( $List as $Role ) {
			if ( $Role_code === $Role->code ) {
				$result = true;
				break;
			}
		}
		
		# Return result
		return $result;
	}
	
	/**
	 * Does user have Permission?
	 * @version 1.2, April 16, 2010
	 * @since 1.1, April 12, 2010
	 * @param mixed $permission
	 * @return bool
	 */
	public function hasPermission ( $permission ) {
		# Prepare
		$result = false;
		
		# Fetch
		$Permission_code = delve($permission,'code');
		
		# Search
		$List = $this->Permissions;
		foreach ( $List as $Permission ) {
			if ( $Permission_code === $Permission->code ) {
				$result = true;
				break;
			}
		}
		
		# Return result
		return $result;
	}
	
	/**
	 * Activate this User
	 * @version 1.1, April 12, 2010
	 * @return string
	 */
	public function activate ( ) {
		# Proceed
		$this->status = 'published';
		
		# Done
		return true;
	}
	
	/**
	 * Has the user been activated?
	 * @version 1.1, April 12, 2010
	 * @return string
	 */
	public function isActive ( ) {
		return $this->status === 'published';
	}
	
	
	# ========================
	# ENSURES
	
	
	/**
	 * Ensure Uid
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return bool
	 */
	public function ensureUid ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave','postSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Fetch Salt
		// helps against rainbow attacks
		$salt = Bal_App::getConfig('bal.setup.salt','');
		
		# Is it different?
		$uid = md5($salt.$this->username.$this->email);
		if ( $User->get('uid') != $uid ) {
			$User->set('uid', $uid, false);
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Ensure Fullname
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureFullname ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave','postSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Fullname
		$fullname = implode(' ', array($User->title, $User->firstname, $User->lastname));
		if ( $User->get('fullname') !== $fullname ) {
			$User->set('fullname', $fullname, false); // false at end to prevent comparison
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Ensure Code
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureCode ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Fullname
		if ( !$User->get('code') ) {
			$User->set('code', $User->username, false); // false at end to prevent comparison
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Ensure Displayname
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureDisplayname ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Fullname
		if ( !$User->get('displayname') ) {
			$User->set('displayname', $User->username, false); // false at end to prevent comparison
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Ensure Username
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureUsername ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Fullname
		if ( !$User->get('username') ) {
			$User->set('username', $User->email, false); // false at end to prevent comparison
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Ensure Tags
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return bool
	 */
	public function ensureSubscriptionTags ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('preSave','postSave')) ) {
			# Not designed for these events
			return null;
		}
		
		# Handle
		$save = Bal_Doctrine_Core::ensureTags($Event,'SubscriptionTags','subscriptions');
		
		# Return save
		return $save;
	}
	
	/**
	 * Ensure Messages
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @param string $Event_type
	 * @return boolean	wheter or not to save
	 */
	public function ensureMessages ( $Event, $Event_type ) {
		# Check
		if ( !in_array($Event_type,array('postInsert')) ) {
			# Not designed for these events
			return null;
		}
		
		# Prepare
		$save = false;
		
		# Fetch
		$User = $Event->getInvoker();
		
		# Create Welcome Message
		$Message = new Message();
		$Message->UserFor = $User;
		$Message->useTemplate('user-insert');
		$Message->save();
		
		# Return save
		return $save;
	}
	
	/**
	 * Ensure Consistency
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensure ( $Event, $Event_type ){
		return Bal_Doctrine_Core::ensure($Event,$Event_type,array(
			'ensureCode',
			'ensureUid',
			'ensureFullname',
			'ensureUsername',
			'ensureDisplayname',
			'ensureSubscriptionTags',
			'ensureMessages'
		));
	}
	
	
	# ========================
	# Verify
	
	
	/**
	 * Performs additional checks to ensure record validity
	 * @version 1.1, April 14, 2010
	 * @since 1.0, April 12, 2010
	 * @param array $params - Identity
	 * @return bool	whether or not the check passed
	 */
	public function verify ( array $params ) {
		return Bal_Doctrine_Core::verify($this,$params,array(
			'verifyAccess',
		));
	}
	
	/**
	 *  Ensures the Identity has sufficient access to perform the operation
	 * @version 1.1, April 14, 2010
	 * @since 1.0, April 12, 2010
	 * @param array $params - Identity
	 * @return bool	whether or not the check passed
	 */
	public function verifyAccess ( array $params ) {
		# Prepare params
		array_keys_keep_ensure($params,array('action','Identity'));
		extract($params);
		
		# Prepare result
		$result = true;
		
		# Fetch
		$User = $this;
		
		# --------------------------
		
		# Check Action
		if ( !in_array($action,array('view','edit','delete')) ) {
			# Fail
			throw new Doctrine_Exception('error-user-verifyaccess-action-invalid');
			$result = false;
		}
		else {
			// We are a valid action
			
			# Check Action
			if ( $action !== 'view' ) {
				// Always allow view
				// We must be a edit now
				
				# Check Type
				if ( !$Identity || !($Identity instanceOf User) ) {
					# Fail
					throw new Doctrine_Exception('error-user-verifyaccess-identity-invalid');
					$result = false;
				}
				else {
					// We are a valid Identity
		
					# Check Permission
					if ( !$Identity->hasPermission('user') ) {
						// Does not have permission, will need to perform other checks
		
						# Prepare
						$User_id = delve($User,'id');
						
						# Check Ownership
						if ( $User_id && $User_id !== $Identity->id ) {
							// this is not our brief to edit
							throw new Doctrine_Exception('error-user-verifyaccess-indentity-ownership');
							$result = false;
						}
					}
				}
			}
		}
		
		# --------------------------
		
		# Return result
		return $result;
	}
	
	
	# ========================
	# EVENTS
	
	
	/**
	 * preSave Event
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return
	 */
	public function preSave ( $Event ) {
		# Prepare
		$result = true;
		
		# Ensure
		if ( self::ensure($Event, __FUNCTION__) ) {
			// no need
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	/**
	 * postSave Event
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return
	 */
	public function postSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$result = true;
		
		# Ensure
		$save = self::ensure($Event, __FUNCTION__);
		if ( $save ) {
			$Invoker->save();
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	/**
	 * Post Insert Event
	 * @version 1.1, April 12, 2010
	 * @param Doctrine_Event $Event
	 * @return string
	 */
	public function postInsert ( $Event ) {
		# Prepare
		$result = true;
		
		# Ensure
		if ( self::ensure($Event, __FUNCTION__) ) {
			// no need
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	# ========================
	# Payment Helpers
	
	/**
	 * Convert us into the Payment Model Representation
	 * @return PaymentPayer
	 */
	public function generatePaymentModel ( ) {
		# Prepare
		$User = $this;
		$user = $User->toArray(false);
		
		# Prepare PaymentPayer
		$PaymentPayer = new Bal_Payment_Model_Payer();
		
		# Adjust Keys
		$keys = $PaymentPayer->getKeys(); array_keys_keep($user, $keys);
		
		# Apply the PaymentPayer
		$PaymentPayer->merge($user);
		
		# Validate
		$PaymentPayer->validate();
		
		# Return the PaymentPayer
		return $PaymentPayer;
	}
	
	# ========================
	# CRUD Helpers
	
	/**
	 * Fetch all the records for public access
	 * @version 1.0, April 12, 2010
	 * @return mixed
	 */
	public static function fetch ( array $params = array() ) {
		# Prepare
		Bal_Doctrine_Core::prepareFetchParams($params,array('fetch','Identity','User','UserFor','UserFrom'));
		extract($params);
		
		# Query
		$Query = Doctrine_Query::create();
		
		# Handle
		switch ( $fetch ) {
			case 'Subscribers':
				$Query
					->select('User.id, User.displayname, User.fullname, User.username, User.created_at, User.email, User.type, User.status, User.created_at, Avatar.url')
					->addSelect('User.subscriptions, SubscriptionTag.name, COUNT(MessagesPublishedFor.id) as subscription_published_count')
					->from('User.SubscriptionTags SubscriptionTag')
					->where('User.status = ?', 'published')
					->andWhere('User.subscriptions != ?', '') // not empty
					->orderBy('User.email ASC')
					->leftJoin('User.MessagesFor MessagesPublishedFor WITH MessagesPublishedFor.template = ? AND MessagesPublishedFor.status = ?', array('content-subscription','published'))
					->groupBy('User.id')
					;
				break;
			
			default:
				$Query
					->select('User.id, User.displayname, User.fullname, User.username, User.created_at, User.email, User.type, User.status, User.created_at, Avatar.url')
					->from('User, User.Avatar Avatar')
					->orderBy('User.username ASC')
					;
				break;
		}
		
		# Criteria
		if ( $Identity ) { // Ensure returned users are below our level - pawns should be unaware of kings
			$Query->andWhere('User.level <= ?', $Identity->level);
		}
		if ( $User ) {
			$identifier = Bal_Doctrine_Core::resolveIdentifier('User',$User);
			$Query->andWhere(
				'User.'.$identifer['column'].' = ?',
				$identifer['value']
			);
		}
		
		# Fetch
		$result = Bal_Doctrine_Core::prepareFetchResult($params,$Query,'User');
		
		# Done
		return $result;
	}
	
	/**
	 * Fetch a form for a User
	 * @version 1.1, April 12, 2010
	 * @param Bal_Model_User $User
	 * @return Zend_Form
	 */
	public static function fetchForm ( Bal_User $User ) {
		# Prepare
		$Form = Bal_Form_Doctrine::createForm('User');
		
		# Group Elements
		$elements = array(
			'essential' => array(
				'username','password','email','displayname','type','status'
			),
			'names' => array(
				'title','firstname','lastname','description'
			),
			'contact' => array(
				'phone','address1','address2','suburb','state','country'
			),
			'other' => array(
				'subscriptions', 'Avatar', 'Permissions', 'Roles'
			)
		);
		
		# Add Id
		Bal_Form_Doctrine::addIdElement($Form,'User',$User);
		
		# Generate Elements
		$Elements = Bal_Form_Doctrine::addElements($Form, 'User', $elements, $User);
		
		# Return Form
		return $Form;
	}
	
}
